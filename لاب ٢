{"metadata":{"language_info":{"name":"python","version":"3.7.8","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"from platform import python_version \nprint (python_version())","metadata":{"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"3.7.8\n","output_type":"stream"}]},{"cell_type":"markdown","source":"#2.1 Running python","metadata":{}},{"cell_type":"code","source":"#filenamr.py\n\"\"\"this is the header.\nthe header contains basic information about the file.\"\"\"\nif __name__ == \"__main__\":\n    pass#","metadata":{"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"##Exercise1;","metadata":{}},{"cell_type":"code","source":"if __name__ == \"__main__\":\n    print(\"Hello,world\")#indent with four spaces (not a tab).","metadata":{"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"Hello,world\n","output_type":"stream"}]},{"cell_type":"code","source":"def sphere_volume(r):\n    pi=3.14159 \n    v=4/3*pi*r**3\n    return v\n\nif _name_ == \"_main_\":\n    volume=sphere_volume(5)\n    print(volume)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def information (course, prof, level);\n    print(course +  prof+  \"in\" + level)\n    \ninformation ('IS372', 'prof .mohammed' , str(8))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def sphere_volume(r);\n     pi=3.14159\n     v=4/3 *pi *  r  **3\n        return v\nif __name__ == \"__main__\":\n    volume= sphere_volume(5)\n    print (volume)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"help(print)","metadata":{"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Help on built-in function print in module builtins:\n\nprint(...)\n    print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n    \n    Prints the values to a stream, or to sys.stdout by default.\n    Optional keyword arguments:\n    file:  a file-like object (stream); defaults to the current sys.stdout.\n    sep:   string inserted between values, default a space.\n    end:   string appended after the last value, default a newline.\n    flush: whether to forcibly flush the stream.\n\n","output_type":"stream"}]},{"cell_type":"code","source":"x,y=1,4\nz = x+ y\nprint(z/2)","metadata":{"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"2.5\n","output_type":"stream"}]},{"cell_type":"code","source":"x==y","metadata":{"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"False"},"metadata":{}}]},{"cell_type":"code","source":"def mathematical_operations (x,y):\n    temp = x + y\n    return temp\nz = x+ y\nprint(z/2)","metadata":{"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"2.5\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Exercise 5\nThe  volume  of  a  sphere  with  radius  ùëü   is\n$$v=\\frac{4}{3} \\pi r^(3)$$\n\n\nùëâ  =  4\n3 ùúãùëü 3   define  a \nfunction  called  sphere_volume()  that  accepts  a  single  parameter  r. \nReturn  the  volume  of  the  sphere  of  radius  r,  using  3.14159  as  an \napproximation for  ùúã  (for now). To test your function, call it under the if \n_name_ == \"_main_\" clause and print the returned value. Run your file \nto see if your answer is what you expect it to be.","metadata":{}},{"cell_type":"code","source":"def sphere_volume(r):\n    pi=3.14159\n    v= 4/3 * pi * r **3\n    return v\nif _name_ == \"_main_\":\n    volume= sphere_volume(5)\n    print (volume)","metadata":{"trusted":true},"execution_count":12,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-f07aaaa14f77>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mv\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m3\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mpi\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mr\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0;32mif\u001b[0m \u001b[0m_name_\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"_main_\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m     \u001b[0mvolume\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0msphere_volume\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mvolume\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name '_name_' is not defined"],"ename":"NameError","evalue":"name '_name_' is not defined","output_type":"error"}]},{"cell_type":"code","source":"course_name= \"IS-372 data mining & data warehhouse\"\nprint( course_name [0:5])","metadata":{"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"IS-37\n","output_type":"stream"}]},{"cell_type":"code","source":"print( course_name [6:])","metadata":{"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":" data mining & data warehhouse\n","output_type":"stream"}]},{"cell_type":"code","source":"print( course_name [5:-1])","metadata":{"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"2 data mining & data warehhous\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 1.4 Lists","metadata":{}},{"cell_type":"code","source":"my_list = [\"IS-372\", \"Prof. M\",10]\nmy_list[2]\nmy_list.append(4)\nmy_list.remove(10)\nmy_list","metadata":{"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"['IS-372', 'Prof. M', 4]"},"metadata":{}}]},{"cell_type":"markdown","source":"## 1.5.  Tuples","metadata":{}},{"cell_type":"code","source":"my_set = {}","metadata":{"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":"## 1.7.  Dictionaries","metadata":{}},{"cell_type":"code","source":"dic= {\"key1\":10,\"key2\":5}\ndic[\"key1\"]\n\ndic","metadata":{"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"{'key1': 10, 'key2': 5}"},"metadata":{}}]},{"cell_type":"markdown","source":"## Exercise 7:\nWrite a function called list_ops(). Define a list with the entries \n\"bear\", \"ant\", \"cat\", and \"dog\", in that order. Then perform the following \noperations on the list:","metadata":{}},{"cell_type":"code","source":"prof= \"Al-sarem\"\nlevel =8\ntype(prof)\ntype(level)","metadata":{"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"int"},"metadata":{}}]},{"cell_type":"code","source":"course_name = \"is-372 DATA mining & data warehousing\"\nprint( course_name [2])","metadata":{"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"-\n","output_type":"stream"}]},{"cell_type":"code","source":"my_list =[\"is-372\", \"prof. m\",10]\nmy_list[2]","metadata":{"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"10"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}